@use "tailwindcss";
@use "sass:map";

// /**
//  * Breakpoints for Responsive Design
//  *
//  * @description
//  * Defines a set of breakpoints for creating responsive layouts that adapt to various device sizes.
//  * These breakpoints allow the application to provide an optimal viewing experience across different
//  * screen widths, from mobile phones to large desktop monitors.
//  */
// $breakpoints: (
//     sm: 48em,   // Small Devices (Landscape Phones, 576px and up)
//     md: 64em,   // Medium Devices (Tablets, 768px and up)
//     lg: 82.667em, // Large Devices (Desktops, 992px and up)
//     xl: 100em   // Extra Large Devices (Large Desktops, 1200px and up)
// );

// /**
//  * Color Palette
//  *
//  * @description
//  * The color palette defines the primary, secondary, neutral, border, success, warning, and error colors
//  * used throughout the project. Each color is defined in a range of shades for flexibility in design.
//  * These variables enable easy updates to the design's color scheme while maintaining consistency.
//  */
// $colors: (
//     primary: (
//         50: hsl(223, 100%, 70%),
//         100: hsl(223, 100%, 50%), // Original Color #0049ff
//         200: hsl(223, 100%, 35%),
//         300: hsl(223, 100%, 29%),
//         400: hsl(223, 100%, 20%),
//         500: hsl(223, 100%, 13%),
//     ),
//     neutral: (
//         50: hsl(0, 0%, 96%),
//         100: hsl(0, 0%, 79%),
//         200: hsl(0, 0%, 59%),
//         300: hsl(0, 0%, 40%),
//         400: hsl(0, 0%, 22%),
//         500: hsl(0, 0%, 7%), // Background Color #111111
//     ),
//     border: (
//         50: hsla(0, 0%, 95.29%, 0.1),
//         100: hsla(0, 0%, 100%, 0.1), // Actual Border Color
//         200: hsla(0, 0%, 90.59%, 0.1),
//         300: hsla(0, 0%, 85.88%, 0.1),
//         400: hsla(0, 0%, 81.18%, 0.1),
//         500: hsla(0, 0%, 76.47%, 0.1),
//     ),
//     success: (
//         50: hsl(150, 100%, 49%),
//         100: hsl(150, 100%, 39%), // Original Color #00C853
//         200: hsl(150, 100%, 29%),
//         300: hsl(150, 100%, 20%),
//         400: hsl(150, 100%, 13%),
//         500: hsl(150, 100%, 9%),
//     ),
//     warning: (
//         50: hsl(59, 94%, 81%),
//         100: hsl(59, 94%, 71%), // Original Color #f9f871
//         200: hsl(59, 94%, 51%),
//         300: hsl(59, 94%, 41%),
//         400: hsl(59, 94%, 21%),
//         500: hsl(59, 94%, 13%),
//     ),
//     error: (
//         50: hsl(347, 100%, 60%),
//         100: hsl(347, 100%, 50%), // Original Color #ff003d
//         200: hsl(347, 100%, 39%),
//         300: hsl(347, 100%, 34%),
//         400: hsl(347, 100%, 29%),
//         500: hsl(347, 100%, 19%),
//     ),
// );

// /**
//  * Typography Scale
//  *
//  * @description
//  * Defines a typography scale for the project, offering predefined font sizes for small, medium,
//  * and large text. This scale ensures consistency in text size across different elements such as
//  * paragraphs, headings, and subheadings. The values are defined in rem units for better scalability.
//  */
// $typo-scale: (
//     small: (
//         100: 0.625rem,   // 7.5px
//         200: 0.875rem,   // 10.5px
//         300: 1rem,       // 12px
//         400: 1.125rem,   // 13.5px
//         500: 1.5rem,     // 18px
//         600: 1.875rem,   // 22.5px
//         700: 2.25rem,    // 27px
//         800: 3rem        // 36px
//     ),
//     medium: (
//         100: 0.75rem,    // 9px
//         200: 1rem,       // 12px
//         300: 1.125rem,   // 13.5px
//         400: 1.25rem,    // 15px
//         500: 1.75rem,    // 21px
//         600: 2.25rem,    // 27px
//         700: 3rem,       // 36px
//         800: 4rem        // 48px
//     ),
//     large: (
//         100: 0.875rem,   // 10.5px
//         200: 1.125rem,   // 13px
//         300: 1.25rem,    // 15px
//         400: 1.5rem,     // 18px
//         500: 2rem,       // 24px
//         600: 3rem,       // 36px
//         700: 4.5rem,     // 54px
//         800: 6rem        // 72px
//     )
// );


// :root {
//     @each $color, $shades in $colors {
//         @each $shade, $value in $shades {
//             --clr-#{$color}-#{$shade}: #{$value};
//         }
//     }

//     @each $screen-size, $font-size in $typo-scale {
//         @if $screen-size == small {
//             @each $size, $value in $font-size {
//                 --fs-#{$size}: #{$value};
//             }
//         } @else if $screen-size == medium {
//             @include min-media-query(md) {
//                 @each $size, $value in $font-size {
//                     --fs-#{$size}: #{$value};
//                 }
//             }
//         }
//     }
// }



// /**
//  * Font-Face Mixin
//  *
//  * @description
// */

// @mixin font-face($name, $path, $weight: normal, $style: normal) {
//     @font-face {
//         font-family: "#{$name}";
//         src: url("~@app/fonts/#{$path}.ttf") format("truetype");
//         font-weight: #{$weight};
//         font-style: #{$style};
//     }
// }


// /**
//  * Cyberpunk Glow Mixin
//  *
//  * @description
//  * Adds a customizable soft glowing effect to block-level elements.
//  * Includes an optional animation dynamically generated based on input values.
//  *
//  * @param {Color} $glow-color - The color of the glow (default: #f9cd26).
//  * @param {Number} $blur - The blur radius of the glow (default: 15px).
//  * @param {Number} $spread - The spread radius of the glow (default: 5px).
//  * @param {Boolean} $animated - Whether to add a subtle pulsing animation (default: true).
//  */
// @mixin cyberpunk-glow(
//     $glow-color: #ffffff,
//     $blur: 15px,
//     $spread: 5px,
//     $animated: true
// ) {
//     box-shadow: 0 0 $spread $blur $glow-color;

//     // Dynamically generate animation if $animated is true
//     @if $animated {
//         animation: cyberpunk-pulse-#{$blur}-#{$spread} 1.5s infinite alternate;

//         @keyframes cyberpunk-pulse-#{$blur}-#{$spread} {
//             0% {
//                 box-shadow: 0 0 calc(#{$spread} / 2) calc(#{$blur} / 2)
//                     rgba($glow-color, 0.8) !important;
//             }
//             100% {
//                 box-shadow: 0 0 #{$spread} #{$blur} rgba($glow-color, 0.5) !important;
//             }
//         }
//     }
// }


// @mixin border-flare($color: #ff00ff, $duration: 3s, $spread: 10px, $pause-duration: 2s, $base-opacity: 0.5) {
//   position: relative;

//   &:before {
//     content: '';
//     position: absolute;
//     top: calc(-#{$spread} / 2);
//     left: calc(-#{$spread} / 2);
//     right: calc(-#{$spread} / 2);
//     bottom: calc(-#{$spread} / 2);
//     border: 2px solid transparent;
//     border-radius: inherit; // Match the parent element's border-radius
//     background: linear-gradient(90deg, transparent, $color, transparent);
//     background-size: 200% 200%; // Ensure the gradient spans enough to create a smooth animation
//     filter: blur(4px); // Apply glow effect
//     opacity: $base-opacity; // Set the initial opacity to the base opacity
//     z-index: -1;
//     animation: flare-breathe $duration linear infinite, flare-opacity $pause-duration ease-in-out infinite;
//   }

//   // Main animation for the flare movement
//   @keyframes flare-breathe {
//     0% {
//       background-position: 100% 0;
//     }
//     25% {
//       background-position: 0 100%;
//     }
//     50% {
//       background-position: 100% 100%;
//     }
//     75% {
//       background-position: 0 0;
//     }
//     100% {
//       background-position: 100% 0;
//     }
//   }

//   // Opacity animation for the breathing effect
//   @keyframes flare-opacity {
//     0% {
//       opacity: 0; // Use the base opacity at the start
//     }
//     50% {
//       opacity: $base-opacity; // Fade out to 0%
//     }
//     100% {
//       opacity: 0; // Fade back to the base opacity
//     }
//   }
// }


// // Global typography settings
// html {
//     font-size: 12px;
// }

// body {
//     font-display: swap;
//     font-size: var(--fs-300);
//     line-height: var(--fs-500);
//     letter-spacing: -0.03rem;
// }
